{"version":3,"sources":["App.js","index.js"],"names":["App","props","getRow","rowIndex","state","grid","map","item","value","getRowHead","getRowSecond","getRowTail","slice","getData","labels","datasets","label","data","applyChanges","changes","row","forEach","cell","col","setState","zero","element","className","config","title","this","xLabel","yLabel","options","yTickCount","legendPosition","chartXkcd","positionType","upLeft","valueRenderer","getValue","onCellsChanged","React","Component","ReactDOM","render","document","getElementById"],"mappings":"0jBAwFeA,E,YAjFX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAYVC,OAAS,SAACC,GACN,OAAO,EAAKC,MAAMC,KAAKF,GAAUG,IAAI,SAAAC,GAAI,OAAIA,EAAKC,SAdnC,EAiBnBC,WAAa,SAACN,GACV,OAAO,EAAKD,OAAOC,GAAU,IAlBd,EAoBnBO,aAAe,SAACP,GACZ,OAAO,EAAKD,OAAOC,GAAU,IArBd,EAuBnBQ,WAAa,SAACR,GACV,OAAO,EAAKD,OAAOC,GAAUS,MAAM,IAxBpB,EA2BnBC,QAAU,WACN,MAAO,CACHC,OAAQ,EAAKH,WAAW,GACxBI,SAAU,CAAC,CACPC,MAAO,EAAKP,WAAW,GACvBQ,KAAM,EAAKN,WAAW,IACvB,CACCK,MAAO,EAAKP,WAAW,GACvBQ,KAAM,EAAKN,WAAW,OAnCf,EA4CnBO,aAAe,SAACC,GACZ,IAAMd,EAAO,EAAKD,MAAMC,KAAKC,IAAI,SAAAc,GAAG,mBAAQA,KAC5CD,EAAQE,QAAQ,YAA6B,EAA3BC,KAA4B,IAAtBF,EAAqB,EAArBA,IAAKG,EAAgB,EAAhBA,IAAKf,EAAW,EAAXA,MAC9BH,EAAKe,GAAKG,G,qVAAV,IAAqBlB,EAAKe,GAAKG,GAA/B,CAAqCf,YAEzC,EAAKgB,SAAS,CAACC,MAAK,EAAOpB,KAAKA,KA/ChC,EAAKD,MAAQ,CACTqB,MAAM,EACNpB,KAAM,CACF,CAAC,CAACG,MAAQ,wCAAyC,CAACA,MAAQ,cAC5D,CAAC,CAACA,MAAQ,SAAU,CAACA,MAAQ,WAAY,CAACA,MAAQ,YAAY,CAACA,MAAQ,SAAS,CAACA,MAAQ,SAAS,CAACA,MAAQ,QAAS,CAACA,MAAQ,QAAS,CAACA,MAAQ,UAAU,CAACA,MAAQ,aAAa,CAACA,MAAQ,WAAW,CAACA,MAAO,YAAY,CAACA,MAAO,aAC/N,CAAC,CAACA,MAAQ,QAAS,CAACA,MAAQ,GAAI,CAACA,MAAQ,GAAG,CAACA,MAAQ,IAAI,CAACA,MAAQ,IAAI,CAACA,MAAQ,IAAI,CAACA,MAAQ,IAAK,CAACA,MAAQ,KAAM,CAACA,MAAQ,KAAK,CAACA,MAAQ,KAAK,CAACA,MAAQ,KAAK,CAACA,MAAQ,OACnK,CAAC,CAACA,MAAQ,WAAW,CAACA,MAAQ,GAAI,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAI,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,GAAG,CAACA,MAAQ,OARjJ,E,sEAwCVkB,GACL,OAAOA,EAAQlB,Q,+BAYf,OACI,6BACI,yBAAKmB,UAAW,mBAChB,kBAAC,OAAD,CACAC,OAAQ,CACJC,MAAOC,KAAKrB,WAAW,GACvBsB,OAAQD,KAAKrB,WAAW,GACxBuB,OAAQF,KAAKpB,aAAa,GAC1BO,KAAMa,KAAKjB,UACXoB,QAAS,CACLC,WAAY,EACZC,eAAgBC,IAAUR,OAAOS,aAAaC,YAKtD,yBAAKX,UAAW,mBAChB,kBAAC,IAAD,CACIV,KAAMa,KAAK1B,MAAMC,KACjBkC,cAAeT,KAAKU,SACpBC,eAAgBX,KAAKZ,qB,GA1EvBwB,IAAMC,WCAxBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.6189508d.chunk.js","sourcesContent":["import React from 'react';\nimport chartXkcd from 'chart.xkcd';\nimport { Line } from \"chart.xkcd-react\";\nimport './App.css';\nimport ReactDataSheet from 'react-datasheet';\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            zero: true,\n            grid: [\n                [{value:  \"Monthly income of an indie developer\"}, {value:  \"$ Dollors\"}, ],\n                [{value:  \"Month\"}, {value:  \"January\"}, {value:  \"February\"},{value:  \"March\"},{value:  \"April\"},{value:  \"June\"}, {value:  \"July\"}, {value:  \"August\"},{value:  \"September\"},{value:  \"October\"},{value: \"November\"},{value: \"December\"} ],\n                [{value:  \"Plan\"}, {value:  1}, {value:  3},{value:  30},{value:  37},{value:  45},{value:  63}, {value:  110}, {value:  223},{value:  310},{value:  433},{value:  1003} ],\n                [{value:  \"Reality\"},{value:  2}, {value:  4},{value:  3},{value:  3},{value:  3},{value:  3},{value:  2}, {value:  4},{value:  3},{value:  3},{value:  10}]\n            ]\n        };\n    }\n\n    getRow = (rowIndex) => {\n        return this.state.grid[rowIndex].map(item => item.value);\n    }\n\n    getRowHead = (rowIndex) => {\n        return this.getRow(rowIndex)[0];\n    }\n    getRowSecond = (rowIndex) => {\n        return this.getRow(rowIndex)[1];\n    }\n    getRowTail = (rowIndex) => {\n        return this.getRow(rowIndex).slice(1);\n    }\n\n    getData = () => {\n        return {\n            labels: this.getRowTail(1),\n            datasets: [{\n                label: this.getRowHead(2),\n                data: this.getRowTail(2),\n            }, {\n                label: this.getRowHead(3),\n                data: this.getRowTail(3),\n            }],\n        };\n    }\n\n    getValue(element) {\n        return element.value;\n    }\n\n    applyChanges = (changes) => {\n        const grid = this.state.grid.map(row => [...row]);\n        changes.forEach(({cell, row, col, value}) => {\n            grid[row][col] = {...grid[row][col], value};\n        });\n        this.setState({zero:false, grid:grid});\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={'sheet-container'}>\n                <Line\n                config={{\n                    title: this.getRowHead(0), // optional\n                    xLabel: this.getRowHead(1), // optional\n                    yLabel: this.getRowSecond(0), // optional\n                    data: this.getData(),\n                    options: { // optional\n                        yTickCount: 3,\n                        legendPosition: chartXkcd.config.positionType.upLeft\n                    }\n                }}\n                />\n                </div>\n                <div className={'sheet-container'}>\n                <ReactDataSheet\n                    data={this.state.grid}\n                    valueRenderer={this.getValue}\n                    onCellsChanged={this.applyChanges}\n                />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}